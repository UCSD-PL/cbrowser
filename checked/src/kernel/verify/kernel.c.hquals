qualif TabIdx(v:int) : v >= 0
qualif TabIdx(v:int) : v <= 10
qualif TabIdx(v:int) : v < 10
qualif NNTabs(v:ptr) : v != 0 => BLOCK_BEGIN([v]) + 40 < BLOCK_END([v])
qualif Tabs(v:ptr) : BLOCK_BEGIN([v]) + 40 < BLOCK_END([v])

qualif TagsetSng(v:ptr, t:int):     TAGSET([v])                      = Set_sng([t])
qualif NNTagsetSng(v:ptr, p:int):   v != 0 => TAGSET([v])            = TAGSET([p])
qualif TagsetSngFld4(v:ptr, t:int): TAGSET([(DEREF([v + 4]) : int)]) = Set_sng([t])
qualif TagsetSngFld8(v:ptr, t:int): TAGSET([DEREF([v + 8])])         = Set_sng([t])
qualif TagsetSelf(v:int):           TAGSET([v])                      = Set_sng([v])
qualif TagsetEqInt(v:int, x:int):   TAGSET([v])                      = TAGSET([x])
qualif MsgTypeFdTags(v:ptr):        TAGSET([v])                      = TAGSET([(DEREF([v + 4]) : int)])
qualif MsgContentFdTags(v:ptr):     TAGSET([DEREF([v + 8])])         = TAGSET([(DEREF([v + 4]) : int)])
qualif TagsetEmpty(v:ptr): ? Set_emp([TAGSET([v])])
qualif TagsetEmpty(v:int): ? Set_emp([TAGSET([v])])
qualif NZTag(v:int): v > 0 => ? Set_emp([TAGSET([v])])

//Domain functions
constant DOMAIN: func(1, [@(0); int])
constant THE_STRING: func(1, [@(0); int])
qualif StringDomain(v:int, p:ptr): v != 0 => DOMAIN([v]) = DOMAIN([p])
qualif StringDomain(v:ptr): v != 0 => DOMAIN([v]) = THE_STRING([v])
qualif NNStringEq(v:ptr, p:ptr): v != 0 => THE_STRING([v]) = THE_STRING([p])
qualif DomainEqPtrs(v:int, p:ptr): DOMAIN([v]) = DOMAIN([p])
qualif DomainStr(v:int): && [BLOCK_BEGIN([VVADDR]) <= VVADDR; VVADDR < BLOCK_END([VVADDR])] => DOMAIN([v]) = DOMAIN([VVADDR])
qualif MsgContentFdDomain(v:ptr):   DOMAIN([DEREF([v + 8])])         = DOMAIN([(DEREF([v + 4]) : int)])

// Message Types      
qualif K2G_DISPLAY_SHM(v:ptr): (DEREF([v]) : int) = 0        
qualif REQ_URI_FOLLOW(v:ptr):  (DEREF([v]) : int) = 2        
qualif RENDER(v:ptr):          (DEREF([v]) : int) = 4        
qualif RES_URI(v:ptr):         (DEREF([v]) : int) = 7        
qualif RES_COOKIE(v:ptr):      (DEREF([v]) : int) = 12
qualif K2C_SET_COOKIE(v:ptr):  (DEREF([v]) : int) = 13
qualif K2C_GET_COOKIE(v:ptr):  (DEREF([v]) : int) = 14
qualif K2C_GET_COOKIE(v:ptr):  (DEREF([v]) : int) = 15

//Cookie Domain Policy
constant COOKIE_DOMAIN_SET: func(1, [int; int; bool])
constant COOKIE_DOMAIN_GET: func(1, [int; int; bool])

qualif D1GetD2(v:ptr): v != 0 => ? COOKIE_DOMAIN_GET([DOMAIN([v]);DOMAIN([~d])])
qualif D1SetD2(v:ptr): v != 0 => ? COOKIE_DOMAIN_SET([DOMAIN([v]);DOMAIN([~d])])
qualif NND1SubD2Get(v:ptr, d:ptr): v != 0 => ? COOKIE_DOMAIN_GET([THE_STRING([d]);DOMAIN([v])])
qualif ListSize(v:ptr, n:int): BLOCK_BEGIN([v]) + n*16 <= BLOCK_END([v])
qualif ParseCookieDomain(v:ptr): v != 0 => DOMAIN([v]) = DOMAIN([DEREF([v])])
qualif CookieString(v:ptr): DOMAIN([v]) = THE_STRING([DEREF([v])])
qualif NullTermStringArray(v:ptr): v != 0 => ((VVADDR + 8) < BLOCK_END([VVADDR]))
qualif NND1SubD2Get(v:ptr, d:ptr): ? COOKIE_DOMAIN_GET([DOMAIN([d]);DOMAIN([DEREF([v])])])

// Type of Messages that can be sent
qualif OkMessage(v:ptr):
  || [&& [(DEREF([v]) : int) = 0; ? Set_emp([TAGSET([(DEREF([v + 4]) :int)])])];
      && [(DEREF([v]) : int) = 2; TAGSET([v]) = TAGSET([(DEREF([v + 4]) :int)]); TAGSET([DEREF([v+8])]) = TAGSET([(DEREF([v + 4]) :int)])];
      && [(DEREF([v]) : int) = 2; ? Set_emp([TAGSET([(DEREF([v + 4]) :int)])])];
      && [(DEREF([v]) : int) = 4];
      && [(DEREF([v]) : int) = 7; TAGSET([v]) = TAGSET([(DEREF([v + 4]) :int)]); TAGSET([DEREF([v+8])]) = TAGSET([(DEREF([v + 4]) :int)])];
      && [(DEREF([v]) : int) = 12; ? COOKIE_DOMAIN_GET([DOMAIN([(DEREF([v + 4]) :int)]);
                                                        DOMAIN([DEREF([v + 8])])])];
      (? Set_emp([TAGSET([DEREF([v + 8])])]))]
