// Some useful functions
constant DOMAIN:     func(1, [@(0); int])
constant SOURCE:     func(1, [@(0); int])
constant DATA_AT:    func(1, [@(0); @(1); int])
constant THE_STRING: func(1, [@(0); int])

qualif Gets_SourceDomainCond(v:ptr): v != 0 => ? COOKIE_DOMAIN_GET([DOMAIN([SOURCE([v])]);DOMAIN([v])])

qualif StringDomain1(v:int, p:ptr): v != 0 => DOMAIN([v]) = DOMAIN([p])
qualif SoupCookieDomain(v:ptr):           DOMAIN([v]) = THE_STRING([DEREF([v+8])])
qualif SoupCookieSource(v:ptr):           v != 0 => SOURCE([v]) = SOURCE([DEREF([v+8])])
qualif NNDomainCookieEqString(v:ptr, p:ptr): v != 0 => DOMAIN([DEREF([v + 4])]) = THE_STRING([p])

qualif CookieStringEq(v:ptr, c:ptr): THE_STRING([DEREF([v])]) = THE_STRING([DEREF([c])])
qualif StringEqDerefCookieString(v:ptr, c:ptr): THE_STRING([v]) = THE_STRING([DEREF([c])])

//Cookie Domain Policy
constant COOKIE_DOMAIN_SET: func(1, [int; int; bool])
constant COOKIE_DOMAIN_GET: func(1, [int; int; bool])
axiom: forall [d:int]. ? COOKIE_DOMAIN_GET([d;d])

qualif CookieListDomain(v:ptr, s:ptr): v != 0 => ? COOKIE_DOMAIN_GET([DOMAIN([s]);DOMAIN([v])])

qualif HashIdx(v:int): v < 53
qualif TableSize(v:ptr): v != 0 => BLOCK_BEGIN([v]) + 212 <= BLOCK_END([v])
qualif LinkedList(v:ptr, p:ptr): p > 0 => v > 0

qualif StructDom(v:ptr): v != 0 => &&[DOMAIN([DEREF([v])])    = DOMAIN([v]);
                                      DOMAIN([DEREF([v+4])])  = DOMAIN([v]); 
                                      DOMAIN([DEREF([v+8])])  = DOMAIN([v]); 
                                      DOMAIN([DEREF([v+12])]) = DOMAIN([v])] 

qualif CookieList_Eq_Cookie(v:ptr,c:ptr): DEREF([v+4]) = c
qualif CookieDomString_Eq_String(v:ptr,s:ptr): v != 0 => THE_STRING([DEREF([v + 8])]) = THE_STRING([s])
qualif CookieDomString_Eq_String(v:ptr,s:ptr):           THE_STRING([DEREF([v + 8])]) = THE_STRING([s])

axiom: forall [d:int]. ? COOKIE_DOMAIN_GET([d;d])
